/**
 * Configura√ß√£o de Produ√ß√£o - Gerador de Rol√™s
 * Este arquivo deve ser usado em produ√ß√£o sem chaves de API expostas
 */

// Configura√ß√£o da API para produ√ß√£o (sem chaves expostas)
function getAPIConfig() {
    console.log('üîç getAPIConfig chamado - hostname:', window.location.hostname);
    
    // For√ßa modo desenvolvimento se configurado
    const forceDevelopment = window.FORCE_DEVELOPMENT_MODE === true;
    
    // Detecta plataforma de hospedagem
    const isGitHubPages = window.location.hostname.includes('github.io');
    const isNetlify = window.location.hostname.includes('netlify.app') || window.location.hostname.includes('netlify.com');
    const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
    
    // Determina se √© desenvolvimento
    const isDevelopment = forceDevelopment || isLocalhost;
    
    if (isDevelopment) {
        // Para desenvolvimento local, usa chave configurada em dev-config.js
        const devKey = window.DEV_API_KEY;
        if (!devKey) {
            console.error('‚ùå Chave de desenvolvimento n√£o configurada');
            throw new Error('Configura√ß√£o de desenvolvimento necess√°ria');
        }
        console.log('üè† Modo desenvolvimento detectado - usando API direta');
        
        return {
            apiUrl: `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${devKey}`,
            useServerless: false
        };
    } else if (isNetlify) {
        // Em Netlify, usa fun√ß√£o serverless
        console.log('üåê Netlify detectado - usando fun√ß√£o serverless');
        return {
            apiUrl: '/.netlify/functions/generate-role',
            useServerless: true
        };
    } else if (isGitHubPages) {
        // Em GitHub Pages, retorna erro para for√ßar fallback
        console.log('üìñ GitHub Pages detectado - API n√£o dispon√≠vel, usando fallback');
        throw new Error('API n√£o dispon√≠vel no GitHub Pages - usando fallback local');
    } else {
        // Fallback padr√£o - sem API
        console.log('üîß Ambiente desconhecido - sem API dispon√≠vel');
        throw new Error('API n√£o configurada - usando fallback local');
    }
}

window.PRODUCTION_MODE = true;